{"version":3,"sources":["components/Card/index.js","components/Scoreboard/index.js","components/Container/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","image","alt","name","onClick","checkClick","clicked","id","Scoreboard","currentScore","highScore","Container","children","Wrapper","App","state","gameImages","this","map","image_id","key","image_src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s8EAaeA,MAVf,SAAcC,GACV,OACI,yBAAKC,UAAU,OACX,yBAAKC,IAAKF,EAAMG,MAAOC,IAAKJ,EAAMK,KAClCC,QAAS,kBAAMN,EAAMO,WAAWP,EAAMQ,QAASR,EAAMS,S,MCqBlDC,MAzBf,SAAoBV,GAChB,OACI,yBAAKC,UAAU,yBACX,yBAAKA,UAAU,qBACX,4CACA,mGACA,6BACA,yBAAKA,UAAU,sCACX,yBAAKA,UAAU,0BACX,wBAAIA,UAAU,YACT,IACD,8BACK,IADL,WACkBD,EAAMW,aADxB,IACuC,KAEvC,uCACWX,EAAMY,iB,MCP9BC,MARf,SAAmBb,GACf,OACI,yBAAKC,UAAU,mBACVD,EAAMc,W,MCGJC,MANf,SAAiBf,GACb,OACI,yBAAKC,UAAU,WAAWD,EAAMc,W,OCwCvBE,G,iNApCfC,MAAQ,CACNN,aAAc,EACdC,UAAW,EACXM,c,EAGFX,WAAa,SAACC,EAASC,K,wEAUZ,IAAD,OACN,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYE,aAAcQ,KAAKF,MAAMN,aACnCC,UAAWO,KAAKF,MAAML,YACxB,kBAAC,EAAD,KACGO,KAAKF,MAAMC,WAAWE,KAAI,SAAAjB,GAAK,OAC9B,kBAAC,EAAD,CAAMM,GAAIN,EAAMkB,SACdC,IAAKnB,EAAMkB,SACXlB,MAAOA,EAAMoB,UACbf,QAASL,EAAMK,QACfD,WAAY,EAAKA,sB,GA5BfiB,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8da9c9c0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props){\r\n    return (\r\n        <div className=\"btn\">\r\n            <img src={props.image} alt={props.name}\r\n            onClick={() => props.checkClick(props.clicked, props.id)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Scoreboard(props){\r\n    return(\r\n        <div className=\"jumbotron text-center\">\r\n            <div className=\"jumbotron-content\">\r\n                <h2>Clicky Game!</h2>\r\n                <p>Click on an image to score a point, dont click the same image twice!</p>\r\n                <hr />\r\n                <div className=\"navbar container-fluid text-center\">\r\n                    <div className=\"scoreboard text-center\">\r\n                        <h3 className=\"d-inline\">\r\n                            {\" \"}\r\n                            <span>\r\n                                {\" \"} Score: {props.currentScore} {\" \"}\r\n                            </span>\r\n                            <span>\r\n                                High: {props.highScore}\r\n                            </span>\r\n                        </h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scoreboard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Container(props){\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props){\r\n    return (\r\n        <div className=\"wrapper\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\nimport Card from './components/Card';\nimport Scoreboard from './components/Scoreboard';\nimport Container from './components/Container'\nimport Wrapper from './components/Wrapper';\nimport gameImages from './gameImages.json';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    currentScore: 0,\n    highScore: 0,\n    gameImages\n  }\n\n  checkClick = (clicked, id) => {\n    const newHighScore = (a, b) => {\n      if (a === b)\n        return a + 1\n      else\n        return a\n    }\n  }\n\n\n    render(){\n      return (\n        <Wrapper>\n          <Scoreboard currentScore={this.state.currentScore}\n            highScore={this.state.highScore} />\n          <Container>\n            {this.state.gameImages.map(image => (\n              <Card id={image.image_id}\n                key={image.image_id}\n                image={image.image_src}\n                clicked={image.clicked}\n                checkClick={this.checkClick}\n              />\n            ))}\n          </Container>\n        </Wrapper>\n      )\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}